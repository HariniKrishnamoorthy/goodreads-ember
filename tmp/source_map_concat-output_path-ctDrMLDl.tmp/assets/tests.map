{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","frontend/tests/app.lint-test.js","frontend/tests/helpers/destroy-app.js","frontend/tests/helpers/ember-simple-auth.js","frontend/tests/helpers/resolver.js","frontend/tests/helpers/start-app.js","frontend/tests/integration/components/log-out-test.js","frontend/tests/test-helper.js","frontend/tests/tests.lint-test.js","frontend/tests/unit/controllers/bookdetails-test.js","frontend/tests/unit/controllers/discover-book-test.js","frontend/tests/unit/controllers/login-test.js","frontend/tests/unit/controllers/post-book-test.js","frontend/tests/unit/controllers/user-test.js","frontend/tests/unit/models/bookdetails-test.js","frontend/tests/unit/models/login-test.js","frontend/tests/unit/models/user-test.js","frontend/tests/unit/routes/bookdetails-test.js","frontend/tests/unit/routes/discover-book-test.js","frontend/tests/unit/routes/index-test.js","frontend/tests/unit/routes/login-test.js","frontend/tests/unit/routes/post-book-test.js","frontend/tests/unit/routes/user-test.js","frontend/tests/unit/services/session-test.js","vendor/ember-cli/app-config.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define('frontend/tests/app.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('ESLint | app');\n\n  QUnit.test('adapters/application.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'adapters/application.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('authenticators/oauth2.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'authenticators/oauth2.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('authorizers/oauth2.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'authorizers/oauth2.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/log-out.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/log-out.js should pass ESLint\\n\\n4:11 - Use import { inject } from \\'@ember/service\\'; instead of using Ember.inject.service (ember/new-module-imports)\\n4:11 - \\'Ember\\' is not defined. (no-undef)\\n9:3 - Unexpected \\'debugger\\' statement. (no-debugger)\\n10:3 - Use closure actions, unless you need bubbling (ember/closure-actions)');\n  });\n\n  QUnit.test('controllers/bookdetails.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'controllers/bookdetails.js should pass ESLint\\n\\n15:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)');\n  });\n\n  QUnit.test('controllers/discover-book.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'controllers/discover-book.js should pass ESLint\\n\\n4:11 - Use import { inject } from \\'@ember/service\\'; instead of using Ember.inject.service (ember/new-module-imports)\\n4:11 - \\'Ember\\' is not defined. (no-undef)\\n5:9 - Use import { computed } from \\'@ember/object\\'; instead of using Ember.computed (ember/new-module-imports)\\n5:9 - \\'Ember\\' is not defined. (no-undef)\\n7:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n7:15 - Use import { hash } from \\'rsvp\\'; instead of using Ember.RSVP.hash (ember/new-module-imports)\\n7:15 - \\'Ember\\' is not defined. (no-undef)\\n8:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n8:12 - \\'$\\' is not defined. (no-undef)\\n14:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n15:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)');\n  });\n\n  QUnit.test('controllers/login.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'controllers/login.js should pass ESLint\\n\\n6:10 - \\'compare\\' is defined but never used. (no-unused-vars)\\n7:20 - \\'service\\' is defined but never used. (no-unused-vars)\\n8:10 - \\'bind\\' is defined but never used. (no-unused-vars)\\n13:11 - Use import { inject } from \\'@ember/service\\'; instead of using Ember.inject.service (ember/new-module-imports)\\n13:11 - \\'Ember\\' is not defined. (no-undef)\\n30:8 - \\'credential\\' is already defined. (no-redeclare)\\n32:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n32:20 - \\'$\\' is not defined. (no-undef)\\n33:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)');\n  });\n\n  QUnit.test('controllers/post-book.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/post-book.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/user.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'controllers/user.js should pass ESLint\\n\\n5:2 - Only string, number, symbol, boolean, null, undefined, and function are allowed as default properties (ember/avoid-leaking-state-in-ember-objects)\\n44:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n45:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n46:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n47:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n49:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n51:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n52:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n53:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n54:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n55:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n62:20 - \\'answer\\' is defined but never used. (no-unused-vars)\\n63:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n64:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n67:19 - \\'reason\\' is defined but never used. (no-unused-vars)\\n68:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n69:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n71:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)');\n  });\n\n  QUnit.test('models/bookdetails.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/bookdetails.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/discover-book.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'models/discover-book.js should pass ESLint\\n\\n4:11 - Use import { inject } from \\'@ember/service\\'; instead of using Ember.inject.service (ember/new-module-imports)\\n4:11 - \\'Ember\\' is not defined. (no-undef)');\n  });\n\n  QUnit.test('models/genre.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/genre.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/login.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/login.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/post-book.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/post-book.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/user.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/user.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('resolver.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('router.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'router.js should pass ESLint\\n\\n15:3 - Unexpected capital letter in route\\'s name (ember/no-capital-letters-in-routes)\\n16:3 - Unexpected capital letter in route\\'s name (ember/no-capital-letters-in-routes)');\n  });\n\n  QUnit.test('routes/application.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'routes/application.js should pass ESLint\\n\\n4:16 - Use import Route from \\'@ember/routing/route\\'; instead of using Ember.Route (ember/new-module-imports)');\n  });\n\n  QUnit.test('routes/bookdetails.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'routes/bookdetails.js should pass ESLint\\n\\n1:8 - \\'Route\\' is defined but never used. (no-unused-vars)\\n4:16 - Use import Route from \\'@ember/routing/route\\'; instead of using Ember.Route (ember/new-module-imports)\\n4:16 - \\'Ember\\' is not defined. (no-undef)\\n5:11 - Use import { inject } from \\'@ember/service\\'; instead of using Ember.inject.service (ember/new-module-imports)\\n5:11 - \\'Ember\\' is not defined. (no-undef)\\n6:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n6:16 - \\'transition\\' is defined but never used. (no-unused-vars)');\n  });\n\n  QUnit.test('routes/discover-book.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'routes/discover-book.js should pass ESLint\\n\\n4:11 - Use import { inject } from \\'@ember/service\\'; instead of using Ember.inject.service (ember/new-module-imports)\\n4:11 - \\'Ember\\' is not defined. (no-undef)\\n8:10 - Use import { hash } from \\'rsvp\\'; instead of using Ember.RSVP.hash (ember/new-module-imports)\\n8:10 - \\'Ember\\' is not defined. (no-undef)\\n9:9 - \\'$\\' is not defined. (no-undef)');\n  });\n\n  QUnit.test('routes/index.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/index.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/login.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'routes/login.js should pass ESLint\\n\\n5:16 - Use import Route from \\'@ember/routing/route\\'; instead of using Ember.Route (ember/new-module-imports)');\n  });\n\n  QUnit.test('routes/post-book.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/post-book.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/user.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/user.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('services/session.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'services/session.js should pass ESLint\\n\\n');\n  });\n});","define('frontend/tests/helpers/destroy-app', ['exports'], function (exports) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = destroyApp;\n  function destroyApp(application) {\n    Ember.run(application, 'destroy');\n  }\n});","define('frontend/tests/helpers/ember-simple-auth', ['exports', 'ember-simple-auth/authenticators/test'], function (exports, _test) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.authenticateSession = authenticateSession;\n  exports.currentSession = currentSession;\n  exports.invalidateSession = invalidateSession;\n\n\n  const TEST_CONTAINER_KEY = 'authenticator:test';\n\n  function ensureAuthenticator(app, container) {\n    const authenticator = container.lookup(TEST_CONTAINER_KEY);\n    if (!authenticator) {\n      app.register(TEST_CONTAINER_KEY, _test.default);\n    }\n  }\n\n  function authenticateSession(app, sessionData) {\n    const { __container__: container } = app;\n    const session = container.lookup('service:session');\n    ensureAuthenticator(app, container);\n    session.authenticate(TEST_CONTAINER_KEY, sessionData);\n    return app.testHelpers.wait();\n  }\n\n  function currentSession(app) {\n    return app.__container__.lookup('service:session');\n  }\n\n  function invalidateSession(app) {\n    const session = app.__container__.lookup('service:session');\n    if (session.get('isAuthenticated')) {\n      session.invalidate();\n    }\n    return app.testHelpers.wait();\n  }\n});","define('frontend/tests/helpers/resolver', ['exports', 'frontend/resolver', 'frontend/config/environment'], function (exports, _resolver, _environment) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n\n\n  const resolver = _resolver.default.create();\n\n  resolver.namespace = {\n    modulePrefix: _environment.default.modulePrefix,\n    podModulePrefix: _environment.default.podModulePrefix\n  };\n\n  exports.default = resolver;\n});","define('frontend/tests/helpers/start-app', ['exports', 'frontend/app', 'frontend/config/environment'], function (exports, _app, _environment) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = startApp;\n  function startApp(attrs) {\n    let attributes = Ember.merge({}, _environment.default.APP);\n    attributes.autoboot = true;\n    attributes = Ember.merge(attributes, attrs); // use defaults, but you can override;\n\n    return Ember.run(() => {\n      let application = _app.default.create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n      return application;\n    });\n  }\n});","define('frontend/tests/integration/components/log-out-test', ['qunit', 'ember-qunit', '@ember/test-helpers'], function (_qunit, _emberQunit, _testHelpers) {\n  'use strict';\n\n  (0, _qunit.module)('Integration | Component | log-out', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n\n    (0, _qunit.test)('it renders', async function (assert) {\n      // Set any properties with this.set('myProperty', 'value');\n      // Handle any actions with this.set('myAction', function(val) { ... });\n\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"AU0tMJ1C\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[20,\\\"log-out\\\"],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n\n      assert.equal(this.element.textContent.trim(), '');\n\n      // Template block usage:\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"mBnJ/hGm\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"log-out\\\",null,null,{\\\"statements\\\":[[0,\\\"        template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n\n      assert.equal(this.element.textContent.trim(), 'template block text');\n    });\n  });\n});","define('frontend/tests/test-helper', ['frontend/tests/helpers/resolver', 'ember-mocha'], function (_resolver, _emberMocha) {\n  'use strict';\n\n  (0, _emberMocha.setResolver)(_resolver.default);\n});","define('frontend/tests/tests.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('ESLint | tests');\n\n  QUnit.test('helpers/destroy-app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/destroy-app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/resolver.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/resolver.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/start-app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/start-app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/log-out-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/log-out-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('test-helper.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/bookdetails-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/bookdetails-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/discover-book-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/discover-book-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/login-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/login-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/post-book-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/post-book-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/user-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/user-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/models/bookdetails-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/bookdetails-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/models/login-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/login-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/models/user-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/user-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/bookdetails-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/bookdetails-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/discover-book-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/discover-book-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/index-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/index-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/login-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/login-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/post-book-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/post-book-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/user-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/user-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/services/session-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/services/session-test.js should pass ESLint\\n\\n');\n  });\n});","define('frontend/tests/unit/controllers/bookdetails-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Controller | bookdetails', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    // Replace this with your real tests.\n    (0, _qunit.test)('it exists', function (assert) {\n      let controller = this.owner.lookup('controller:bookdetails');\n      assert.ok(controller);\n    });\n  });\n});","define('frontend/tests/unit/controllers/discover-book-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Controller | discover-book', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    // Replace this with your real tests.\n    (0, _qunit.test)('it exists', function (assert) {\n      let controller = this.owner.lookup('controller:discover-book');\n      assert.ok(controller);\n    });\n  });\n});","define('frontend/tests/unit/controllers/login-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Controller | login', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    // Replace this with your real tests.\n    (0, _qunit.test)('it exists', function (assert) {\n      let controller = this.owner.lookup('controller:login');\n      assert.ok(controller);\n    });\n  });\n});","define('frontend/tests/unit/controllers/post-book-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Controller | post-book', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    // Replace this with your real tests.\n    (0, _qunit.test)('it exists', function (assert) {\n      let controller = this.owner.lookup('controller:post-book');\n      assert.ok(controller);\n    });\n  });\n});","define('frontend/tests/unit/controllers/user-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Controller | user', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    // Replace this with your real tests.\n    (0, _qunit.test)('it exists', function (assert) {\n      let controller = this.owner.lookup('controller:user');\n      assert.ok(controller);\n    });\n  });\n});","define('frontend/tests/unit/models/bookdetails-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Model | bookdetails', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    // Replace this with your real tests.\n    (0, _qunit.test)('it exists', function (assert) {\n      let store = this.owner.lookup('service:store');\n      let model = store.createRecord('bookdetails', {});\n      assert.ok(model);\n    });\n  });\n});","define('frontend/tests/unit/models/login-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Model | login', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    // Replace this with your real tests.\n    (0, _qunit.test)('it exists', function (assert) {\n      let store = this.owner.lookup('service:store');\n      let model = store.createRecord('login', {});\n      assert.ok(model);\n    });\n  });\n});","define('frontend/tests/unit/models/user-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Model | user', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    // Replace this with your real tests.\n    (0, _qunit.test)('it exists', function (assert) {\n      let store = this.owner.lookup('service:store');\n      let model = store.createRecord('user', {});\n      assert.ok(model);\n    });\n  });\n});","define('frontend/tests/unit/routes/bookdetails-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Route | bookdetails', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    (0, _qunit.test)('it exists', function (assert) {\n      let route = this.owner.lookup('route:bookdetails');\n      assert.ok(route);\n    });\n  });\n});","define('frontend/tests/unit/routes/discover-book-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Route | discoverBook', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    (0, _qunit.test)('it exists', function (assert) {\n      let route = this.owner.lookup('route:discover-book');\n      assert.ok(route);\n    });\n  });\n});","define('frontend/tests/unit/routes/index-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Route | index', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    (0, _qunit.test)('it exists', function (assert) {\n      let route = this.owner.lookup('route:index');\n      assert.ok(route);\n    });\n  });\n});","define('frontend/tests/unit/routes/login-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Route | login', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    (0, _qunit.test)('it exists', function (assert) {\n      let route = this.owner.lookup('route:login');\n      assert.ok(route);\n    });\n  });\n});","define('frontend/tests/unit/routes/post-book-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Route | postBook', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    (0, _qunit.test)('it exists', function (assert) {\n      let route = this.owner.lookup('route:post-book');\n      assert.ok(route);\n    });\n  });\n});","define('frontend/tests/unit/routes/user-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Route | user', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    (0, _qunit.test)('it exists', function (assert) {\n      let route = this.owner.lookup('route:user');\n      assert.ok(route);\n    });\n  });\n});","define('frontend/tests/unit/services/session-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Service | session', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    // Replace this with your real tests.\n    (0, _qunit.test)('it exists', function (assert) {\n      let service = this.owner.lookup('service:session');\n      assert.ok(service);\n    });\n  });\n});","define('frontend/config/environment', [], function() {\n  var prefix = 'frontend';\ntry {\n  var metaName = prefix + '/config/environment';\n  var rawConfig = document.querySelector('meta[name=\"' + metaName + '\"]').getAttribute('content');\n  var config = JSON.parse(unescape(rawConfig));\n\n  var exports = { 'default': config };\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n  return exports;\n}\ncatch(err) {\n  throw new Error('Could not read config from meta tag with name \"' + metaName + '\".');\n}\n\n});\n","require('frontend/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n"],"names":[],"mappingsrIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClvjBA;AACA;","file":"tests.js"}